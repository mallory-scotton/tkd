///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Physics/Collider.hpp>
#include <Engine/Physics/BoxCollider.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
// Pre-definition of the circle collider
///////////////////////////////////////////////////////////////////////////////
class BoxCollider;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class CircleCollider : public Collider
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    float m_radius;     //<!
    Vec2f m_offset;     //<!

protected:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool intersectsWithBox(const BoxCollider* other) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool intersectsWithCircle(const CircleCollider* other) const override;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Bounds getBounds(void) const override;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2f getOffset(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param offset
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setOffset(const Vec2f& offset);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    float getRadius(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param radius
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setRadius(float radius);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2f getCenter(void) const;
};

} // namespace tkd
