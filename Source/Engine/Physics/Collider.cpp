///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Physics/Collider.hpp>
#include <Engine/Physics/Physics.hpp>
#include <Engine/Physics/BoxCollider.hpp>
#include <Engine/Physics/CircleCollider.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
Collider::~Collider()
{
    Physics::unregisterCollider(this);
}

///////////////////////////////////////////////////////////////////////////////
bool Collider::isTrigger(void) const
{
    return (m_isTrigger);
}

///////////////////////////////////////////////////////////////////////////////
void Collider::setTrigger(bool trigger)
{
    m_isTrigger = trigger;
}

///////////////////////////////////////////////////////////////////////////////
void Collider::onEnable(void)
{
    Physics::registerCollider(this);
}

///////////////////////////////////////////////////////////////////////////////
void Collider::onDisable(void)
{
    Physics::unregisterCollider(this);
}

///////////////////////////////////////////////////////////////////////////////
bool Collider::intersects(const Collider* other) const
{
    if (auto collider = dynamic_cast<const BoxCollider*>(other)) {
        return (intersectsWithBox(collider));
    }

    if (auto collider = dynamic_cast<const CircleCollider*>(other)) {
        return (intersectsWithCircle(collider));
    }

    return (false);
}

} // namespace tkd
