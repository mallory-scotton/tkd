///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Core/World.hpp>
#include <Engine/Core/GameObject.hpp>
#include <SFML/Graphics.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd::Gui
///////////////////////////////////////////////////////////////////////////////
namespace tkd::Gui
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Editor
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    World& m_world;                     //<!
    GameObject* m_selected;             //<!
    sf::RenderTexture m_texture;        //<!
    bool m_gameViewInitialized = false; //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Editor(World& world);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    String getCleanClassName(const char *name) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawHierarchy(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawInspector(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawConsole(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void drawGameView(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void registerComponentInspectors(void);

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void TransformInspector(Component* component);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void SpriteRendererInspector(Component* component);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    ///
    ///////////////////////////////////////////////////////////////////////////
    static void InputComponentInspector(Component* component);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void render(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    sf::RenderTexture& getGameViewTexture(void);
};

} // namespace tkd::Gui
