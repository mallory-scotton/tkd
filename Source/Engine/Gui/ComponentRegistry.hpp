///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Utils.hpp>
#include <Engine/Core/Component.hpp>
#include <Engine/Core/GameObject.hpp>
#include <typeindex>
#include <typeinfo>
#include <algorithm>
#include <tuple>
#include <cxxabi.h>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd::Gui
///////////////////////////////////////////////////////////////////////////////
namespace tkd::Gui
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class ComponentRegistry
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    using Creator = Function<Component*(GameObject*)>;  //<!
    using Inspector = Function<void(Component*)>;       //<!

private:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    struct ComponentInfo
    {
        String name;            //<!
        Creator creator;        //<!
        Inspector inspector;    //<!
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    UMap<std::type_index, ComponentInfo> m_components;  //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    /// \tparam Args
    ///
    /// \param name
    /// \param inspector
    /// \param args
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T, typename... Args>
    void registerComponent(
        const String& name,
        Inspector inspector = [](Component*){},
        Args&&... defaultArgs
    )
    {
        static_assert(std::is_base_of_v<Component, T>, "T isn't a Component");

        Creator creator =
            [args = std::make_tuple(std::forward<Args>(defaultArgs)...)]
            (GameObject* object) -> Component* {
                return (std::apply([object](auto&&... params) {
                    return (object->addComponent<T>(
                        std::forward<decltype(params)>(params)...
                    ));
                }, args));
            };

        m_components[std::type_index(typeid(T))] = {
            name,
            creator,
            inspector
        };
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const Vector<String> getComponentNames(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    /// \param object
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Component* createComponent(const String& name, GameObject* object);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    ///
    ///////////////////////////////////////////////////////////////////////////
    void inspectComponent(Component* component);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool hasInspector(Component* component);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    static ComponentRegistry& instance(void);
};

} // namespace tkd::Gui
