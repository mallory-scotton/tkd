///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Core/GameObject.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class World
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vector<UPtr<GameObject>> m_gameObjects;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(float deltaTime)
    {
        for (auto& object : m_gameObjects) {
            object->update(deltaTime);
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param fixedDeltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    void FixedUpdate(float fixedDeltaTime) {
        for (auto& object : m_gameObjects) {
            object->fixedUpdate(fixedDeltaTime);
        }
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    GameObject* createGameObject(const String& name)
    {
        auto gameObject = std::make_unique<GameObject>(name);
        GameObject* ptr = gameObject.get();
        m_gameObjects.push_back(std::move(gameObject));
        return (ptr);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector<UPtr<GameObject>>& getGameObjects(void)
    {
        return (m_gameObjects);
    }
};

} // namespace tkd
