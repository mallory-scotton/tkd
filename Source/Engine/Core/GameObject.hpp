///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Utils.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
// Pre-definition of Component class
///////////////////////////////////////////////////////////////////////////////
class Component;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class GameObject
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vector<UPtr<Component>> m_components;   //<!
    String m_name;                          //<!
    bool m_active = true;                   //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    GameObject(const String& objectName);
    
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~GameObject();

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    void start(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    void update(float deltaTime);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param fixedDeltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    void fixedUpdate(float fixedDeltaTime);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    /// \tparam Args
    ///
    /// \param args
    ///
    ///////////////////////////////////////////////////////////////////////////
    template <typename T, typename... Args>
    T* addComponent(Args&&... args)
    {
        static_assert(
            std::is_base_of<Component, T>::value,
            "T must inherit from Component"
        );

        auto component = std::make_unique<T>(std::forward<Args>(args)...);
        T* componentPtr = component.get();
        componentPtr->setGameObject(this);
        componentPtr->awake();
        m_components.push_back(std::move(component));
        return (componentPtr);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \tparam T
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    template<typename T>
    T* getComponent(void)
    {
        static_assert(
            std::is_base_of<Component, T>::value,
            "T must inherit from Component"
        );

        for (auto& component : m_components) {
            T* result = dynamic_cast<T*>(component.get());
            if (result) {
                return (result);
            }
        }
        return (nullptr);
    }

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vector<UPtr<Component>>& getComponents(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param component
    ///
    ///////////////////////////////////////////////////////////////////////////
    void removeComponent(Component* component);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param state
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setActive(bool state);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool isActive(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    const String& getName(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param name
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setName(const String& name);
};

} // namespace tkd
