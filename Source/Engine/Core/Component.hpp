///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Utils.hpp>
#include <Engine/Core/GameObject.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
// Pre-definition of game Object class
///////////////////////////////////////////////////////////////////////////////
class GameObject;

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Component
{
protected:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    GameObject* m_gameObject = nullptr;
    bool m_enabled = true;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual ~Component() = default;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void awake(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void start(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param deltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void update(float deltaTime);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param fixedDeltaTime
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void fixedUpdate(float fixedDeltaTime);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void onDestroy(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param value
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setEnabled(bool value);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool isEnabled(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param object
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setGameObject(GameObject* object);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    GameObject* getGameObject(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void onCollisionEnter(GameObject* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void onCollisionExit(GameObject* other);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void onEnable(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    virtual void onDisable(void);
};

} // namespace tkd
