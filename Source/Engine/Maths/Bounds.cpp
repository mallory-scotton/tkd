///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Maths/Bounds.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
Bounds::Bounds(void)
    : m_center(0.f)
    , m_size(0.f)
{}

///////////////////////////////////////////////////////////////////////////////
Bounds::Bounds(const Vec2f& center, const Vec2f& size)
    : m_center(center)
    , m_size(size)
{}

///////////////////////////////////////////////////////////////////////////////
Vec2f Bounds::min(void) const
{
    return (m_center - m_size / 2.f);
}

///////////////////////////////////////////////////////////////////////////////
Vec2f Bounds::max(void) const
{
    return (m_center + m_size / 2.f);
}

///////////////////////////////////////////////////////////////////////////////
bool Bounds::contains(const Vec2f& point) const
{
    Vec2f mn = min();
    Vec2f mx = max();

    return (
        point.x >= mn.x && point.x <= mx.x &&
        point.y >= mn.y && point.y <= mx.y
    );
}

///////////////////////////////////////////////////////////////////////////////
bool Bounds::intersects(const Bounds& other) const
{
    Vec2f a_min = min();
    Vec2f a_max = max();
    Vec2f b_min = other.min();
    Vec2f b_max = other.max();

    return (!(
        a_max.x < b_min.x || a_min.x > b_max.x ||
        a_max.y < b_min.y || a_min.y > b_max.y
    ));
}

///////////////////////////////////////////////////////////////////////////////
Array<Vec2f, 4> Bounds::getCorners(void) const
{
    Vec2f mn = min();
    Vec2f mx = max();

    return {
        mn,
        {mx.x, mn.y},
        {mn.x, mx.y},
        mx
    };
}

///////////////////////////////////////////////////////////////////////////////
void Bounds::setCenter(const Vec2f& center)
{
    m_center = center;
}

///////////////////////////////////////////////////////////////////////////////
void Bounds::setSize(const Vec2f& size)
{
    m_size = size;
}

///////////////////////////////////////////////////////////////////////////////
Vec2f Bounds::getSize(void) const
{
    return (m_size);
}

///////////////////////////////////////////////////////////////////////////////
Vec2f Bounds::getCenter(void) const
{
    return (m_center);
}

} // namespace tkd
