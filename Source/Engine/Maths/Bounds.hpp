///////////////////////////////////////////////////////////////////////////////
// Header guard
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include <Engine/Utils.hpp>

///////////////////////////////////////////////////////////////////////////////
// Namespace tkd
///////////////////////////////////////////////////////////////////////////////
namespace tkd
{

///////////////////////////////////////////////////////////////////////////////
/// \brief
///
///////////////////////////////////////////////////////////////////////////////
class Bounds
{
private:
    ///////////////////////////////////////////////////////////////////////////
    //
    ///////////////////////////////////////////////////////////////////////////
    Vec2f m_center;     //<!
    Vec2f m_size;       //<!

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    ///////////////////////////////////////////////////////////////////////////
    Bounds(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param center
    /// \param size
    ///
    ///////////////////////////////////////////////////////////////////////////
    Bounds(const Vec2f& center, const Vec2f& size);

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2f min(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2f max(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param point
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool contains(const Vec2f& point) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param other
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    bool intersects(const Bounds& other) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Array<Vec2f, 4> getCorners(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param center
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setCenter(const Vec2f& center);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2f getCenter(void) const;

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \param center
    ///
    ///////////////////////////////////////////////////////////////////////////
    void setSize(const Vec2f& size);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief
    ///
    /// \return
    ///
    ///////////////////////////////////////////////////////////////////////////
    Vec2f getSize(void) const;
};

} // namespace tkd
